{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Desktop/dev/react-mesto-auth/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect, Route, Switch, useHistory, withRouter } from 'react-router-dom';\nimport ProtectedRoute from './ProtectedRoute';\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\nimport '../index.css';\nimport Header from './Header';\nimport Login from './Login';\nimport Register from './Register';\nimport InfoTooltip from './InfoTooltip';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport api from \"../utils/api\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Стейт для данных пользователя\n  const [currentUser, setCurrentUser] = useState({}); // Cтейт для авторизации\n\n  const [loggedIn, setLoggedIn] = useState(false); // Стейт для проверки успеха / неудачи в регистрации пользователя\n\n  const [isRegSuccess, setIsRegSuccess] = useState(false); // Стейт для показа модалки успешной / неудачной регистрации\n\n  const [regModalOpened, setRegModalOpened] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    api.getUserData().then(res => {\n      setCurrentUser(res);\n    }).catch(err => console.log(err));\n  }, []); // Стейты для поп-апов (состояние - открыт / не открыт)\n\n  const [isEditAvatarPopupOpen, setIsAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false); // Стейт для выбранной карточки, исп. в поп-апе картинки в полном размере\n\n  const [selectedCard, setSelectedCard] = useState(null); // Обработчик клика по изображению карточки (открытие поп-апа картинки)\n\n  function handleCardClick(props) {\n    setSelectedCard(props);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  } // Закрытие поп-апов клавишей Esc\n\n\n  function handleClosePopupWithEsc(event) {\n    if (event.keyCode === 27) {\n      closeAllPopups();\n    }\n  } // Показ модалки об успешной/ неудачной регистрации\n\n\n  function openRegModal() {\n    setRegModalOpened(!regModalOpened);\n  } // Закрытие модалки об успешной/ неудачной регистрации\n\n\n  function closeRegModal() {\n    setRegModalOpened(false);\n\n    if (isRegSuccess) {\n      history.push('/sign-in');\n    }\n  } // Обработчик для отправки данных пользователя на сервер (редактирование данных профиля)\n\n\n  function handleUpdateUser(user) {\n    api.editProfile(user.name, user.about).then(res => {\n      setCurrentUser(res);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  } // Обработчик для обновления аватарки пользователя (отправка на сервер через API)\n\n\n  function handleUpdateAvatar(user) {\n    api.uploadAvatar(user.avatar).then(res => {\n      setCurrentUser(res);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  } // Обработчик кнопки редактирования аватарки\n\n\n  function handleEditAvatarClick() {\n    setIsAvatarPopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  } // Обработчик кнопки редактирования инф-ии профиля\n\n\n  function handleEditProfileClick() {\n    setIsProfilePopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  } // Обработчик кнопки добавления карточки\n\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  } // Обработчик закрытия поп-апов\n\n\n  function closeAllPopups() {\n    setIsAddPlacePopupOpen(false);\n    setIsAvatarPopupOpen(false);\n    setIsProfilePopupOpen(false);\n    setSelectedCard(null);\n    window.removeEventListener('keydown', handleClosePopupWithEsc);\n  } // Стейт для карточек\n\n\n  const [cards, setCards] = useState([]); // Получаем данные по пользователю и карточки с сервера\n\n  useEffect(() => {\n    api.getCards().then(res => {\n      setCards(res);\n    }).catch(err => console.log(err));\n  }, []); // Функция лайка карточки\n\n  function handleCardLike(card) {\n    // Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n\n    api.changeLikeCardStatus(card._id, !isLiked).then(newCard => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map(c => c._id === card._id ? newCard : c); // Обновляем стейт\n\n      setCards(newCards);\n    }).catch(err => console.log(err));\n  } // Функция удаления карточки, по аналогии с функцией лайка\n\n\n  function handleCardDelete(card) {\n    api.deleteCard(card._id).then(() => {\n      setCards(cards.filter(item => item._id !== card._id));\n    }).catch(err => console.log(err));\n  } // Функция добавления карточки\n\n\n  function handleAddPlace(card) {\n    api.addNewCard(card.name, card.link).then(res => {\n      setCards([res, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.log(err));\n  }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          exact: true,\n          path: \"/\",\n          loggedIn: loggedIn,\n          component: Main,\n          isEditAvatarPopupOpen: handleEditAvatarClick,\n          isEditProfilePopupOpen: handleEditProfileClick,\n          isAddPlacePopupOpen: handleAddPlaceClick,\n          onCardClick: handleCardClick,\n          cards: cards,\n          onCardLike: handleCardLike,\n          onCardDelete: handleCardDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/sign-in\",\n          children: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"sign-up\",\n          children: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar,\n        onClick: e => e.stopPropagation()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlace\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n        onClose: closeAllPopups,\n        name: \"confirm-delete\",\n        title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n        buttonName: \"\\u0414\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        isOpen: regModalOpened,\n        onClose: closeRegModal,\n        isRegSuccess: isRegSuccess,\n        regSuccess: \"\\u0412\\u044B \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0437\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043B\\u0438\\u0441\\u044C!\",\n        regFailed: \"\\u0427\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A! \\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0435\\u0449\\u0451 \\u0440\\u0430\\u0437.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2Ws5YfJN2AblRJUaWNnkwaP7Pqo=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default _c2 = withRouter(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/artem/Desktop/dev/react-mesto-auth/src/components/App.js"],"names":["React","useState","useEffect","Redirect","Route","Switch","useHistory","withRouter","ProtectedRoute","CurrentUserContext","Header","Login","Register","InfoTooltip","Main","Footer","PopupWithForm","ImagePopup","api","EditProfilePopup","EditAvatarPopup","AddPlacePopup","App","currentUser","setCurrentUser","loggedIn","setLoggedIn","isRegSuccess","setIsRegSuccess","regModalOpened","setRegModalOpened","history","getUserData","then","res","catch","err","console","log","isEditAvatarPopupOpen","setIsAvatarPopupOpen","isEditProfilePopupOpen","setIsProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","selectedCard","setSelectedCard","handleCardClick","props","window","addEventListener","handleClosePopupWithEsc","event","keyCode","closeAllPopups","openRegModal","closeRegModal","push","handleUpdateUser","user","editProfile","name","about","handleUpdateAvatar","uploadAvatar","avatar","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","removeEventListener","cards","setCards","getCards","handleCardLike","card","isLiked","likes","some","i","_id","changeLikeCardStatus","newCard","newCards","map","c","handleCardDelete","deleteCard","filter","item","handleAddPlace","addNewCard","link","e","stopPropagation"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Redirect, Route, Switch, useHistory, withRouter } from 'react-router-dom';\nimport ProtectedRoute from './ProtectedRoute';\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\n\nimport '../index.css';\nimport Header from './Header';\nimport Login from './Login';\nimport Register from './Register';\nimport InfoTooltip from './InfoTooltip';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport api from \"../utils/api\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\n\nfunction App() {\n  // Стейт для данных пользователя\n  const [currentUser, setCurrentUser] = useState({});\n\n  // Cтейт для авторизации\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  // Стейт для проверки успеха / неудачи в регистрации пользователя\n  const [isRegSuccess, setIsRegSuccess] = useState(false);\n\n  // Стейт для показа модалки успешной / неудачной регистрации\n  const [regModalOpened, setRegModalOpened] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    api.getUserData()\n      .then(res => {\n        setCurrentUser(res)\n      })\n      .catch(err => console.log(err));\n  }, [])\n\n  // Стейты для поп-апов (состояние - открыт / не открыт)\n  const [isEditAvatarPopupOpen, setIsAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n\n  // Стейт для выбранной карточки, исп. в поп-апе картинки в полном размере\n  const [selectedCard, setSelectedCard] = useState(null);\n\n  // Обработчик клика по изображению карточки (открытие поп-апа картинки)\n  function handleCardClick(props) {\n    setSelectedCard(props);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  }\n\n  // Закрытие поп-апов клавишей Esc\n  function handleClosePopupWithEsc (event) {\n    if (event.keyCode === 27) {\n      closeAllPopups();\n    }\n  }\n\n  // Показ модалки об успешной/ неудачной регистрации\n  function openRegModal() {\n    setRegModalOpened(!regModalOpened);\n  }\n\n  // Закрытие модалки об успешной/ неудачной регистрации\n  function closeRegModal() {\n    setRegModalOpened(false);\n    if (isRegSuccess) {\n      history.push('/sign-in')\n    }\n  }\n\n  // Обработчик для отправки данных пользователя на сервер (редактирование данных профиля)\n  function handleUpdateUser(user) {\n    api.editProfile(user.name, user.about)\n      .then(res => {\n        setCurrentUser(res);\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n  }\n\n  // Обработчик для обновления аватарки пользователя (отправка на сервер через API)\n  function handleUpdateAvatar(user) {\n    api.uploadAvatar(user.avatar)\n      .then(res => {\n        setCurrentUser(res);\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n  }\n\n  // Обработчик кнопки редактирования аватарки\n  function handleEditAvatarClick() {\n    setIsAvatarPopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  }\n\n  // Обработчик кнопки редактирования инф-ии профиля\n  function handleEditProfileClick() {\n    setIsProfilePopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  }\n\n  // Обработчик кнопки добавления карточки\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n    window.addEventListener('keydown', handleClosePopupWithEsc);\n  }\n\n  // Обработчик закрытия поп-апов\n  function closeAllPopups() {\n    setIsAddPlacePopupOpen(false);\n    setIsAvatarPopupOpen(false);\n    setIsProfilePopupOpen(false);\n    setSelectedCard(null);\n    window.removeEventListener('keydown', handleClosePopupWithEsc);\n  }\n\n  // Стейт для карточек\n  const [cards, setCards] = useState([]);\n\n  // Получаем данные по пользователю и карточки с сервера\n  useEffect(() => {\n    api.getCards()\n      .then(res => {\n        setCards(res);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  // Функция лайка карточки\n  function handleCardLike(card) {\n    // Проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n      // Обновляем стейт\n      setCards(newCards);\n    })\n      .catch(err => console.log(err));\n  }\n\n  // Функция удаления карточки, по аналогии с функцией лайка\n  function handleCardDelete(card) {\n    api.deleteCard(card._id)\n      .then(() => {\n        setCards(cards.filter(item => item._id !== card._id));\n      })\n      .catch(err => console.log(err));\n  }\n\n  // Функция добавления карточки\n  function handleAddPlace(card) {\n    api.addNewCard(card.name, card.link)\n      .then(res => {\n        setCards([res, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => console.log(err))\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        {/*<Header />*/}\n\n        {/*<Main*/}\n        {/*  isEditAvatarPopupOpen={handleEditAvatarClick}*/}\n        {/*  isEditProfilePopupOpen={handleEditProfileClick}*/}\n        {/*  isAddPlacePopupOpen={handleAddPlaceClick}*/}\n        {/*  onCardClick={handleCardClick}*/}\n        {/*  cards={cards}*/}\n        {/*  onCardLike={handleCardLike}*/}\n        {/*  onCardDelete={handleCardDelete}*/}\n        {/*/>*/}\n\n        <Switch>\n          <ProtectedRoute\n            exact path=\"/\"\n            loggedIn={loggedIn}\n            component={Main}\n            isEditAvatarPopupOpen={handleEditAvatarClick}\n            isEditProfilePopupOpen={handleEditProfileClick}\n            isAddPlacePopupOpen={handleAddPlaceClick}\n            onCardClick={handleCardClick}\n            cards={cards}\n            onCardLike={handleCardLike}\n            onCardDelete={handleCardDelete}\n          />\n          <Route path=\"/sign-in\">\n            <Login />\n          </Route>\n          <Route path=\"sign-up\">\n            <Register />\n          </Route>\n\n        </Switch>\n\n        <Footer />\n\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n          onClick={(e) => e.stopPropagation()}\n        />\n\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlace}\n        />\n\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n        />\n\n        <PopupWithForm\n          onClose={closeAllPopups}\n          name=\"confirm-delete\"\n          title=\"Вы уверены?\"\n          buttonName=\"Да\"\n        >\n        </PopupWithForm>\n\n        <ImagePopup\n          card={selectedCard}\n          onClose={closeAllPopups}\n        />\n        <InfoTooltip\n          isOpen={regModalOpened}\n          onClose={closeRegModal}\n          isRegSuccess={isRegSuccess}\n          regSuccess=\"Вы успешно зарегестрировались!\"\n          regFailed=\"Что-то пошло не так! Попробуйте ещё раз.\"\n        />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}